#[cfg(feature = "use-default-assetio")]
use bevy::asset::create_platform_default_asset_io;
use bevy::{
    prelude::{App, AssetServer, Plugin},
    tasks::IoTaskPool,
};

use crate::EmbassetIo;

/// Bevy plugin that will insert a custom [`AssetServer`](bevy::asset::AssetServer)
/// instead of the default added by the [`AssetPlugin`](bevy::asset::AssetPlugin).
///
/// If you are using the [`DefaultPlugins`](bevy::prelude::DefaultPlugins) group from Bevy, it can be added this way:
/// TODO: give more examples
///
/// ```rust
/// # use bevy::{prelude::*, asset::AssetPlugin};
/// # use bevy_embasset::EmbassetPlugin;
/// # fn main() {
///     App::new().add_plugins_with(DefaultPlugins, |group| {
///         group.add_before::<AssetPlugin, _>(EmbassetPlugin::new(add_embasset_assets))
///     });
/// # }
/// # fn add_embasset_assets(#[allow(unused)] in_memory: &mut bevy_embasset::EmbassetIo){
/// # }
/// ```
///
/// The `add_embasset_assets` function must be generated by a build script (`build.rs`):
///
/// ```ignore
/// bevy_embasset::include_all_assets(
///     &Path::new(&env::var("CARGO_MANIFEST_DIR").unwrap()).join("assets")
/// );
/// ```
///
/// and includeded in the source:
///
/// ```ignore
/// include!(concat!(env!("OUT_DIR"), "/add_embasset_assets.rs"));
/// ```
///
/// For the build script, use this dependency:
///
/// ```toml
/// [build-dependencies]
/// bevy-embasset = { version = "*", features = ["build"] }
/// ```
#[derive(Debug)]
pub struct EmbassetPlugin<F> {
    initializer: F,
}

impl<F> EmbassetPlugin<F>
where
    F: Fn(&mut EmbassetIo) + Send + Sync + 'static,
{
    /// Create a new instance of the plugin.
    pub fn new(asset_initializer: F) -> Self {
        Self {
            initializer: asset_initializer,
        }
    }
}

impl<F> Plugin for EmbassetPlugin<F>
where
    F: Fn(&mut EmbassetIo) + Send + Sync + 'static,
{
    fn build(&self, app: &mut App) {
        #[cfg(feature = "use-default-assetio")]
        let mut bevy_embasset = EmbassetIo::new(create_platform_default_asset_io(app));

        #[cfg(not(feature = "use-default-assetio"))]
        let mut bevy_embasset = EmbassetIo::new();

        let initializer = &self.initializer;
        initializer(&mut bevy_embasset);

        let task_pool = app
            .world
            .get_resource::<IoTaskPool>()
            .expect("`IoTaskPool` resource not found.")
            .0
            .clone();

        app.insert_resource(AssetServer::new(bevy_embasset, task_pool));
    }
}
